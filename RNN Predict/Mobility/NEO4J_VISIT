/////////////////////////create V2////////////////////////////////
match (n:Station) create(m:StationV2{id:n.id})
match (n:User) create(n:UserV2{id:n.id})

//////////////////////////regular visit////////////////////////////////

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/chriszhenghaochen/NesTS-Vis/master/visitMatrix2.csv" AS row
MATCH (u:UserV2 {id: toInt(row.user)})
MATCH (a:StationV2 {id: toInt(row.station)})
CREATE (u)-[k:VisitsV2]->(a)
SET k.frequency =toInt(row.start);


//////////////////////////predict visit/////////////////////////////////
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/chriszhenghaochen/NesTS-Vis/master/visitMatrix.csv" AS row
MATCH (u:UserV3 {id: toInt(row.user)})
MATCH (a:StationV3 {id: toInt(row.station)})
CREATE (u)-[k:VisitsV3]->(a)
SET k.frequency =toInt(1);

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/chriszhenghaochen/NesTS-Vis/master/visitMatrix3.csv" AS row
MATCH (u:UserV {id: toInt(row.user)})
MATCH (a:StationV {id: toInt(row.station)})
CREATE (u)-[k:VisitsV]->(a)
SET k.frequency =toInt(1);


//////////////////////////find out/////////////////////////////////

MATCH p=()-[r:VisitsV]->() RETURN p
MATCH p=()-[r:VisitsV2]->() RETURN p
MATCH p=()-[r:VisitsV3]->() RETURN p

//////////////////////////delete/////////////////////////////////
MATCH ()-[r:VisitsV]->() DELETE r
MATCH ()-[r:VisitsV2]->() DELETE r
MATCH ()-[r:VisitsV3]->() DELETE r